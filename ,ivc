#!/usr/bin/env python3

import argparse
import yfinance as yf
import numpy as np
import sys

def fetch_stock_data(ticker):
    stock = yf.Ticker(ticker)
    info = stock.info
    return info

def calculate_intrinsic_value(fcf, growth_rate, discount_rate, years, terminal_growth_rate):
    # Project Free Cash Flows
    projected_fcf = [fcf * (1 + growth_rate) ** t for t in range(1, years + 1)]

    # Discount the Free Cash Flows
    discounted_fcf = [fcf / (1 + discount_rate) ** t for t, fcf in enumerate(projected_fcf, 1)]

    # Calculate Terminal Value
    terminal_value = projected_fcf[-1] * (1 + terminal_growth_rate) / (discount_rate - terminal_growth_rate)
    discounted_terminal_value = terminal_value / (1 + discount_rate) ** years

    # Sum of discounted cash flows and terminal value
    intrinsic_value = sum(discounted_fcf) + discounted_terminal_value
    return intrinsic_value

def main():
    parser = argparse.ArgumentParser(description='Intrinsic Value Calculator for Stocks')
    parser.add_argument('ticker', type=str, help='Ticker symbol of the stock (e.g., AAPL)')

    # Tunable arguments
    parser.add_argument('--fcf', type=float, help='Latest Free Cash Flow (in millions)', required=True)
    parser.add_argument('--growth', type=float, default=0.05, help='Expected annual growth rate (default: 5%)')
    parser.add_argument('--discount', type=float, default=0.10, help='Discount rate (default: 10%)')
    parser.add_argument('--years', type=int, default=5, help='Projection period in years (default: 5)')
    parser.add_argument('--terminal_growth', type=float, default=0.02, help='Terminal growth rate (default: 2%)')

    args = parser.parse_args()

    try:
        stock_info = fetch_stock_data(args.ticker)
    except Exception as e:
        print(f"Error fetching data for ticker '{args.ticker}': {e}")
        sys.exit(1)

    # Display basic information
    print(f"Ticker: {args.ticker.upper()}")
    print(f"Company Name: {stock_info.get('longName', 'N/A')}")
    print(f"Current Price: ${stock_info.get('currentPrice', 'N/A')}")
    print(f"Market Cap: {stock_info.get('marketCap', 'N/A')}")

    # Calculate intrinsic value
    intrinsic_value = calculate_intrinsic_value(
        fcf=args.fcf * 1e6,  # Convert millions to actual value
        growth_rate=args.growth,
        discount_rate=args.discount,
        years=args.years,
        terminal_growth_rate=args.terminal_growth
    )

    # Assuming intrinsic value is per share
    shares_outstanding = stock_info.get('sharesOutstanding', None)
    if shares_outstanding:
        intrinsic_value_per_share = intrinsic_value / shares_outstanding
        print(f"Intrinsic Value (Total): ${intrinsic_value:,.2f}")
        print(f"Intrinsic Value per Share: ${intrinsic_value_per_share:,.2f}")
    else:
        print(f"Intrinsic Value: ${intrinsic_value:,.2f}")

if __name__ == '__main__':
    main()
